/**
 * RPX100
 * This is the web REST/JSON API of RPX100 SDR software. RPX100 is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In RPX100 GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /RPX100/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 6.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGPlutoSdrMIMOReport.h
 *
 * PlutoSDR
 */

#ifndef SWGPlutoSdrMIMOReport_H_
#define SWGPlutoSdrMIMOReport_H_

#include <QJsonObject>


#include <QString>

#include "SWGObject.h"
#include "export.h"

namespace SWGRPX100 {

class SWG_API SWGPlutoSdrMIMOReport: public SWGObject {
public:
    SWGPlutoSdrMIMOReport();
    SWGPlutoSdrMIMOReport(QString* json);
    virtual ~SWGPlutoSdrMIMOReport();
    void init();
    void cleanup();

    virtual QString asJson () override;
    virtual QJsonObject* asJsonObject() override;
    virtual void fromJsonObject(QJsonObject &json) override;
    virtual SWGPlutoSdrMIMOReport* fromJson(QString &jsonString) override;

    qint32 getAdcRate();
    void setAdcRate(qint32 adc_rate);

    qint32 getDacRate();
    void setDacRate(qint32 dac_rate);

    qint32 getRx0GainDb();
    void setRx0GainDb(qint32 rx0_gain_db);

    qint32 getRx1GainDb();
    void setRx1GainDb(qint32 rx1_gain_db);

    QString* getRssiRx0();
    void setRssiRx0(QString* rssi_rx0);

    QString* getRssiRx1();
    void setRssiRx1(QString* rssi_rx1);

    QString* getRssiTx0();
    void setRssiTx0(QString* rssi_tx0);

    QString* getRssiTx1();
    void setRssiTx1(QString* rssi_tx1);


    virtual bool isSet() override;

private:
    qint32 adc_rate;
    bool m_adc_rate_isSet;

    qint32 dac_rate;
    bool m_dac_rate_isSet;

    qint32 rx0_gain_db;
    bool m_rx0_gain_db_isSet;

    qint32 rx1_gain_db;
    bool m_rx1_gain_db_isSet;

    QString* rssi_rx0;
    bool m_rssi_rx0_isSet;

    QString* rssi_rx1;
    bool m_rssi_rx1_isSet;

    QString* rssi_tx0;
    bool m_rssi_tx0_isSet;

    QString* rssi_tx1;
    bool m_rssi_tx1_isSet;

};

}

#endif /* SWGPlutoSdrMIMOReport_H_ */
