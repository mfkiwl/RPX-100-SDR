/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 6.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGCWKeyerSettings.h
 *
 * 
 */

#ifndef SWGCWKeyerSettings_H_
#define SWGCWKeyerSettings_H_

#include <QJsonObject>


#include <QString>

#include "SWGObject.h"
#include "export.h"

namespace SWGSDRangel {

class SWG_API SWGCWKeyerSettings: public SWGObject {
public:
    SWGCWKeyerSettings();
    SWGCWKeyerSettings(QString* json);
    virtual ~SWGCWKeyerSettings();
    void init();
    void cleanup();

    virtual QString asJson () override;
    virtual QJsonObject* asJsonObject() override;
    virtual void fromJsonObject(QJsonObject &json) override;
    virtual SWGCWKeyerSettings* fromJson(QString &jsonString) override;

    qint32 getSampleRate();
    void setSampleRate(qint32 sample_rate);

    qint32 getWpm();
    void setWpm(qint32 wpm);

    qint32 getMode();
    void setMode(qint32 mode);

    QString* getText();
    void setText(QString* text);

    qint32 getLoop();
    void setLoop(qint32 loop);

    qint32 getKeyboardIambic();
    void setKeyboardIambic(qint32 keyboard_iambic);

    qint32 getDotKey();
    void setDotKey(qint32 dot_key);

    qint32 getDotKeyModifiers();
    void setDotKeyModifiers(qint32 dot_key_modifiers);

    qint32 getDashKey();
    void setDashKey(qint32 dash_key);

    qint32 getDashKeyModifiers();
    void setDashKeyModifiers(qint32 dash_key_modifiers);


    virtual bool isSet() override;

private:
    qint32 sample_rate;
    bool m_sample_rate_isSet;

    qint32 wpm;
    bool m_wpm_isSet;

    qint32 mode;
    bool m_mode_isSet;

    QString* text;
    bool m_text_isSet;

    qint32 loop;
    bool m_loop_isSet;

    qint32 keyboard_iambic;
    bool m_keyboard_iambic_isSet;

    qint32 dot_key;
    bool m_dot_key_isSet;

    qint32 dot_key_modifiers;
    bool m_dot_key_modifiers_isSet;

    qint32 dash_key;
    bool m_dash_key_isSet;

    qint32 dash_key_modifiers;
    bool m_dash_key_modifiers_isSet;

};

}

#endif /* SWGCWKeyerSettings_H_ */
