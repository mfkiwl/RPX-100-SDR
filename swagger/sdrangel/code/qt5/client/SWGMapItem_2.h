/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 6.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGMapItem_2.h
 *
 * An item to draw on the map. Set image to an empty string to remove item from the map.
 */

#ifndef SWGMapItem_2_H_
#define SWGMapItem_2_H_

#include <QJsonObject>


#include "SWGMapCoordinate.h"
#include <QList>
#include <QString>

#include "SWGObject.h"
#include "export.h"

namespace SWGSDRangel {

class SWG_API SWGMapItem_2: public SWGObject {
public:
    SWGMapItem_2();
    SWGMapItem_2(QString* json);
    virtual ~SWGMapItem_2();
    void init();
    void cleanup();

    virtual QString asJson () override;
    virtual QJsonObject* asJsonObject() override;
    virtual void fromJsonObject(QJsonObject &json) override;
    virtual SWGMapItem_2* fromJson(QString &jsonString) override;

    QString* getName();
    void setName(QString* name);

    QString* getImage();
    void setImage(QString* image);

    qint32 getImageRotation();
    void setImageRotation(qint32 image_rotation);

    qint32 getImageMinZoom();
    void setImageMinZoom(qint32 image_min_zoom);

    QString* getText();
    void setText(QString* text);

    float getLatitude();
    void setLatitude(float latitude);

    float getLongitude();
    void setLongitude(float longitude);

    float getAltitude();
    void setAltitude(float altitude);

    QList<SWGMapCoordinate*>* getTrack();
    void setTrack(QList<SWGMapCoordinate*>* track);

    QList<SWGMapCoordinate*>* getPredictedTrack();
    void setPredictedTrack(QList<SWGMapCoordinate*>* predicted_track);


    virtual bool isSet() override;

private:
    QString* name;
    bool m_name_isSet;

    QString* image;
    bool m_image_isSet;

    qint32 image_rotation;
    bool m_image_rotation_isSet;

    qint32 image_min_zoom;
    bool m_image_min_zoom_isSet;

    QString* text;
    bool m_text_isSet;

    float latitude;
    bool m_latitude_isSet;

    float longitude;
    bool m_longitude_isSet;

    float altitude;
    bool m_altitude_isSet;

    QList<SWGMapCoordinate*>* track;
    bool m_track_isSet;

    QList<SWGMapCoordinate*>* predicted_track;
    bool m_predicted_track_isSet;

};

}

#endif /* SWGMapItem_2_H_ */
