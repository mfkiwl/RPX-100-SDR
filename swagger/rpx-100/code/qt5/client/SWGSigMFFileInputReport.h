/**
 * rpx-100
 * This is the web REST/JSON API of rpx-100 SDR software. rpx-100 is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In rpx-100 GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /rpx-100/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 6.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGSigMFFileInputReport.h
 *
 * SigMFFileInput
 */

#ifndef SWGSigMFFileInputReport_H_
#define SWGSigMFFileInputReport_H_

#include <QJsonObject>


#include "SWGCapture.h"
#include <QList>

#include "SWGObject.h"
#include "export.h"

namespace SWGRPX100 {

class SWG_API SWGSigMFFileInputReport: public SWGObject {
public:
    SWGSigMFFileInputReport();
    SWGSigMFFileInputReport(QString* json);
    virtual ~SWGSigMFFileInputReport();
    void init();
    void cleanup();

    virtual QString asJson () override;
    virtual QJsonObject* asJsonObject() override;
    virtual void fromJsonObject(QJsonObject &json) override;
    virtual SWGSigMFFileInputReport* fromJson(QString &jsonString) override;

    qint32 getSampleSize();
    void setSampleSize(qint32 sample_size);

    qint32 getSampleBytes();
    void setSampleBytes(qint32 sample_bytes);

    qint32 getSampleFormat();
    void setSampleFormat(qint32 sample_format);

    qint32 getSampleSigned();
    void setSampleSigned(qint32 sample_signed);

    qint32 getSampleSwapIq();
    void setSampleSwapIq(qint32 sample_swap_iq);

    qint32 getCrcStatus();
    void setCrcStatus(qint32 crc_status);

    qint32 getTotalBytesStatus();
    void setTotalBytesStatus(qint32 total_bytes_status);

    QList<SWGCapture*>* getCaptures();
    void setCaptures(QList<SWGCapture*>* captures);

    qint32 getTrackNumber();
    void setTrackNumber(qint32 track_number);

    qint64 getAbsoluteTimeMs();
    void setAbsoluteTimeMs(qint64 absolute_time_ms);

    qint64 getElapsedRecordTimeMs();
    void setElapsedRecordTimeMs(qint64 elapsed_record_time_ms);

    float getRecordSamplesRatio();
    void setRecordSamplesRatio(float record_samples_ratio);

    qint64 getElapsedTrackimeMs();
    void setElapsedTrackimeMs(qint64 elapsed_trackime_ms);

    float getTrackSamplesRatio();
    void setTrackSamplesRatio(float track_samples_ratio);

    qint64 getRecordDurationMs();
    void setRecordDurationMs(qint64 record_duration_ms);


    virtual bool isSet() override;

private:
    qint32 sample_size;
    bool m_sample_size_isSet;

    qint32 sample_bytes;
    bool m_sample_bytes_isSet;

    qint32 sample_format;
    bool m_sample_format_isSet;

    qint32 sample_signed;
    bool m_sample_signed_isSet;

    qint32 sample_swap_iq;
    bool m_sample_swap_iq_isSet;

    qint32 crc_status;
    bool m_crc_status_isSet;

    qint32 total_bytes_status;
    bool m_total_bytes_status_isSet;

    QList<SWGCapture*>* captures;
    bool m_captures_isSet;

    qint32 track_number;
    bool m_track_number_isSet;

    qint64 absolute_time_ms;
    bool m_absolute_time_ms_isSet;

    qint64 elapsed_record_time_ms;
    bool m_elapsed_record_time_ms_isSet;

    float record_samples_ratio;
    bool m_record_samples_ratio_isSet;

    qint64 elapsed_trackime_ms;
    bool m_elapsed_trackime_ms_isSet;

    float track_samples_ratio;
    bool m_track_samples_ratio_isSet;

    qint64 record_duration_ms;
    bool m_record_duration_ms_isSet;

};

}

#endif /* SWGSigMFFileInputReport_H_ */
